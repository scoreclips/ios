//
//  AppDataManager.m
//  VISIKARD
//
//  Created by Trong Vu on 2/21/13.
//
//

#import "AppDataManager.h"
#import "AppViewController.h"

@implementation AppDataManager

- (id)init {
    self = [super init];
    if (self) {
         _APIRequester = [APIRequester new];
        //rootData = [[KardsTableData alloc] init];
    }
    return self;
}

#pragma mark - Get data
- (NSMutableArray*) getDataType:(enumAppDataType)dataType forceUpdate:(BOOL)isForceUpdate  {
    
    // Trongv - update and use local database later. Now we store in mem by KardsDataManager
    KardsCategoryData *kardsCategoryData;
    switch (dataType) {
        case enumAppDataType_MeKards:
            kardsCategoryData = [[KardsDataManager kardsShared] getMECategory];
            
            // init for kardsCategoryData
            if (!kardsCategoryData) {
                KardsCategoryData *kardsCategory = [[KardsCategoryData alloc] initWithKardsName:STRING_NAME_DECK_KARDS_ME andKardsID:STRING_NAME_DECK_KARDS_ME andKardsSmallAvatar:nil];
                kardsCategory.isMine = enumIsDataMine_isMine;
                kardsCategory.isLocalCopyType = enumIsLocalCopyType_Copy;
                kardsCategory.kardsSmallAvatarURL = [UserDataManager Shared].avatarSmallURL;
                kardsCategory.kardsMediumAvatarURL = [UserDataManager Shared].avatarSmallURL;
                kardsCategory.kardsLargeAvatarURL = [UserDataManager Shared].avatarSmallURL;
                [[KardsDataManager kardsShared] addCategory:kardsCategory];
            }
            
            if (isForceUpdate) {
                if (kardsCategoryData.CurrentNode.count > 0) {
                    [kardsCategoryData resetAllData];
                }
                // Request API to update data on APP
                [self requestData:ENUM_API_REQUEST_TYPE_KARDS_GET_ME];
            } else {
                if (kardsCategoryData.CurrentNode.count == 0) {
                    // Request API to update data on APP
                    [self requestData:ENUM_API_REQUEST_TYPE_KARDS_GET_ME];
                }
            }
            
            return kardsCategoryData.CurrentNode;
            
            break;
            
        default:
            break;
    }
    return  nil;
}



#pragma mark - APIRequester
- (void)requestData:(ENUM_API_REQUEST_TYPE) type {
    NSString *strURL = @"";
    switch (type) {
        case ENUM_API_REQUEST_TYPE_KARDS_GET_ME:
        {
            [[AppViewController Shared] isRequesting:YES andRequestType:type andFrame:FRAME(0, HEIGHT_HOME_VIEW_CONTROLLER_TITLE, [SupportFunction getDeviceWidth], [SupportFunction getDeviceHeight] - HEIGHT_HOME_VIEW_CONTROLLER_TITLE)];
    
            strURL = [NSString stringWithFormat:@"%@/%i/%i/%i", STRING_REQUEST_URL_KARDS_GET_ME, [UserDataManager Shared].userID, 1, INT_DEFAULT_PAGE_SIZE];
            [_APIRequester requestWithType:type andRootURL:strURL andPostMethodKind:NO andParams:nil andDelegate:self];
            break;
        }
        default:
            break;
    }
}


#pragma mark - APIRequesterProtocol

- (void)requestFinished:(ASIHTTPRequest *)request andType:(ENUM_API_REQUEST_TYPE)type {
    VKLog(@"requestFinished: %@", [request responseString]);
    
    [[AppViewController Shared] isRequesting:NO andRequestType:type andFrame:CGRectZero];
    
    NSError *error;
    SBJSON *sbJSON = [SBJSON new];
    
    if (![sbJSON objectWithString:[request responseString] error:&error] || request.responseStatusCode != 200 || !request) {
        //ALERT(STRING_ALERT_CONNECTION_ERROR_TITLE, STRING_ALERT_SERVER_ERROR);
        [self.delegate requestFinished:request andType:type];
        return;
    }
    
    //NSMutableArray *jsonData = [sbJSON objectWithString:[request responseString] error:&error];

    if (type == ENUM_API_REQUEST_TYPE_KARDS_GET_ME) {
        NSMutableArray *jsonData = [sbJSON objectWithString:[request responseString] error:&error];
        
        KardsCategoryData *kardsCategoryData = [[KardsDataManager kardsShared] getMECategory];
        [kardsCategoryData resetAllData];
        
        for (NSMutableDictionary *dicJson in jsonData) {
            if (![[dicJson objectForKey:STRING_RESPONSE_KEY_IS_DECK] boolValue] || ![dicJson objectForKey:STRING_RESPONSE_KEY_IS_DECK]) {
                KardsNodeData *kardsNode = [[KardsNodeData alloc] initWithKardsName:[dicJson objectForKey:STRING_RESPONSE_KEY_NAME] andKardsID:[[dicJson objectForKey:STRING_RESPONSE_KEY_ID_KARDS] stringValue] andKardsSmallAvatar:nil];
                kardsNode.kardsSmallAvatarURL = [dicJson objectForKey:STRING_RESPONSE_KEY_IMAGE_SMALL];
                kardsNode.kardsMediumAvatarURL = [dicJson objectForKey:STRING_RESPONSE_KEY_IMAGE_MEDIUM];
                kardsNode.kardsLargeAvatarURL = [dicJson objectForKey:STRING_RESPONSE_KEY_IMAGE_LARGE];
                kardsNode.kardType = [[dicJson objectForKey:STRING_RESPONSE_KEY_FK_KARD_TYPE] intValue];
                kardsNode.kardsTradeType = enumKardsTradeType_MyKardsTraded;
                kardsNode.isMine = enumIsDataMine_isMine;
                kardsNode.kardsUserID = [[dicJson objectForKey:STRING_RESPONSE_KEY_FK_USER] stringValue];
                kardsNode.kardsNumberWaitingArrove = [[dicJson objectForKey:STRING_RESPONSE_KEY_NUMBER_WAITING_ARROVE] stringValue];
                kardsNode.isLocalCopyType = enumIsLocalCopyType_FromServer;
                kardsNode.kardsIsMyDefault = [[dicJson objectForKey:STRING_RESPONSE_KEY_IS_MY_DEFAULT] stringValue];
                kardsNode.kardsFeedNumber =  [[dicJson objectForKey:STRING_RESPONSE_KEY_FEED_UNREAD] stringValue];
                kardsNode.profileID = [[dicJson objectForKey:STRING_RESPONSE_KEY_FK_PROFILE] stringValue];
                kardsNode.konnectVisibility = [[dicJson objectForKey:STRING_RESPONSE_KEY_KONNECT_VISIBILITY] stringValue];
                kardsNode.kardsFriendID = [[dicJson objectForKey:STRING_RESPONSE_KEY_FK_ME_KARD] stringValue];
                
                [kardsCategoryData addNode:kardsNode];
            }
            else {
                KardsCategoryData *kardsCategory = [[KardsCategoryData alloc] initWithKardsName:[dicJson objectForKey:STRING_RESPONSE_KEY_NAME] andKardsID:[[dicJson objectForKey:STRING_RESPONSE_KEY_ID_KARDS] stringValue] andKardsSmallAvatar:nil];
                kardsCategory.kardsSmallAvatarURL = [dicJson objectForKey:STRING_RESPONSE_KEY_IMAGE_SMALL];
                kardsCategory.kardsMediumAvatarURL = [dicJson objectForKey:STRING_RESPONSE_KEY_IMAGE_MEDIUM];
                kardsCategory.kardsLargeAvatarURL = [dicJson objectForKey:STRING_RESPONSE_KEY_IMAGE_LARGE];
                kardsCategory.kardType = [[dicJson objectForKey:STRING_RESPONSE_KEY_FK_KARD_TYPE] intValue];
                kardsCategory.kardsTradeType = enumKardsTradeType_MyKardsTraded;
                kardsCategory.isMine = enumIsDataMine_isMine;
                kardsCategory.kardsUserID = [[dicJson objectForKey:STRING_RESPONSE_KEY_FK_USER] stringValue];
                kardsCategory.isLocalCopyType = enumIsLocalCopyType_FromServer;
                kardsCategory.kardsIsMyDefault = [[dicJson objectForKey:STRING_RESPONSE_KEY_IS_MY_DEFAULT] stringValue];
                kardsCategory.kardsFeedNumber =  [[dicJson objectForKey:STRING_RESPONSE_KEY_FEED_UNREAD] stringValue];
                kardsCategory.profileID = [[dicJson objectForKey:STRING_RESPONSE_KEY_FK_PROFILE] stringValue];
                kardsCategory.konnectVisibility = [[dicJson objectForKey:STRING_RESPONSE_KEY_KONNECT_VISIBILITY] stringValue];
                kardsCategory.kardsFriendID = [[dicJson objectForKey:STRING_RESPONSE_KEY_FK_ME_KARD] stringValue];
                
                [kardsCategoryData addNode:kardsCategory];
            }
        }
    }
    
    [self.delegate requestFinished:request andType:type];
}

- (void)requestFailed:(ASIHTTPRequest *)request andType:(ENUM_API_REQUEST_TYPE)type {
    VKLog(@" requestFailed %@ ", request.responseString);
    
    [[AppViewController Shared] isRequesting:NO andRequestType:ENUM_API_REQUEST_TYPE_INVALID andFrame:CGRectZero];
    
    if (![ASIHTTPRequest isNetworkReachable]) {
        //ALERT(STRING_ALERT_CONNECTION_ERROR_TITLE, STRING_ALERT_CONNECTION_ERROR);
    }
    
    [self.delegate requestFailed:request andType:type];
}


static AppDataManager *_AppDataManagerShared;
+ (AppDataManager *)AppDataManagerShared
{
    if (!_AppDataManagerShared){
        _AppDataManagerShared = [[AppDataManager alloc] init];
    }
    return _AppDataManagerShared;
}

@end
